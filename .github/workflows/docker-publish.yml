name: Docker publish

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, review_requested]

jobs:
  build:

    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13.1
        env:
          POSTGRES_USER: quantuser
          POSTGRES_PASSWORD: NotDisclosed
          POSTGRES_DB: quantdb
          POSTGRES_HOST: qleader-db
          POSTGRES_PORT: ${{ job.services.postgres.port[5432] }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5
        

    env:
      ROOT_DIR:
      DEBUG: 'TRUE'
      DJANGO_SECRET_KEY: NotDisclosed
      DATABASE_NAME: quantdb
      DATABASE_USER: quantuser
      DATABASE_PASSWORD: NotDisclosed
      DATABASE_HOST: localhost
      DATABASE_PORT: 5432
      GOOGLE_OAUTH2_KEY: NotDisclosed
      GOOGLE_OAUTH2_SECRET: NotDisclosed

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Run migrations
      run: |
        echo ROOT_DIR= >> .env
        echo DEBUG=True >> .env
        echo DJANGO_SECRET_KEY=NotDisclosed >> .env
        echo DATABASE_NAME=quantdb >> .env
        echo DATABASE_USER=quantuser >> .env
        echo DATABASE_PASSWORD=postgres >> .env
        echo DATABASE_HOST=localhost >> .env
        echo DATABASE_PORT=5432 >> .env
        echo GOOGLE_OAUTH2_KEY=NotDisclosed >> .env
        echo GOOGLE_OAUTH2_SECRET=NotDisclosed >> .env
        python manage.py makemigrations qleader
        python manage.py migrate
    - name: Run unit tests
      run: |
        if [ -f requirements-testing.txt ]; then pip install -r requirements-testing.txt; fi
        docker-compose run qleader-web py.test
    - name: Lint with flake8
      run: flake8 . --show-source --statistics
    - name: Lint with curlylint
      run: curlylint templates/
    - name: Generate coverage
      run: |
        docker-compose run qleader-web coverage run -m pytest
        docker-compose run qleader-web coverage xml
    - name: "Upload coverage to Codecov"
      uses: codecov/codecov-action@v1
      with:
        files: ./coverage.xml
        fail_ci_if_error: true
    - name: Set up Docker Buildx
      if: ${{ github.event_name == 'push'}}
      uses: docker/setup-buildx-action@v1
#    - name: Login to DockerHub
#      if: ${{ github.event_name == 'push'}}
#      uses: docker/login-action@v1
#      with:
#        username: ${{ secrets.DOCKERHUB_USERNAME }}
#        password: ${{ secrets.DOCKERHUB_TOKEN }}
#    - name: Build WebMark and push
#      if: ${{ github.event_name == 'push'}}
#      uses: docker/build-push-action@v2
#      with:
#        push: true
#        tags: blakaut/qleader:latest
